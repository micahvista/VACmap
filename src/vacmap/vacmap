'''   
 * @Title: VACmap 
 * @author: Ding Hongyu
 * @date: 12 6 2023
 * @version V1.0.1
'''
import sys
import os
import edlib

import pandas as pd
import pysam
import pysam
import numpy as np
import heapq
from numba import njit, jit

from Bio import SeqIO

import time 

from numba.typed import Dict
from numba.typed import List
import matplotlib.pyplot as plt
import copy
from Bio.Seq import Seq
import re

from cigar import Cigar
from io import StringIO
import multiprocessing
import os
import vacmap_index as mp
import gzip
import sys
import logging
import glob

logging.basicConfig(format='%(levelname)s: %(asctime)s %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p', level=logging.INFO)
testseq = 'AATTTTCTGCTTAGTTTTGTTGTTGCATCTTCAAACAGCAGCGTTTGGCCGCAGAGCATGGCAAGTGCTTAAGAGAAGACGGAAAAGCGTTCCATGTGTGCGTGGAGGAACAGGAGCGGAAGCGGTTCTGGGATGGCCATCATGTAGGGGGGCGGGACCCTGAAGAAGCACGGAGCCTTTGTAGGGAGGCCTCAGCAAGGCACCCCTGAGAGAGGACGGCCCAGCGTTGACTCCCAGTTGAGGACAGTTATGCAGATTCCAGGCTGCATAAGCTCCATGGTGGCCTAGCTGCGTTACCCATGCCTGCGTCCTGGCGCCTCACTTGCAAACTCAGCCACATCAGCGCGGGAAGCAGGAGGGGGAGCACCTCGCAGAGCGGCAGGATATTTCAGGAGAGAGTAAAGAGAGAAGGCAGGGGAGGGAGGAGAGACCACAATCAACGTAACTTTCTATTTACAGTAAATGGTTATAGTTGTTCTTTATTGTTAGTTAGTGTTAACCTCTTCCTCGTGCCTGACCTGTGAATTAAACTTAGATCATCCCCCGGCTGTGTATTGAGAAAAAACAGTTATAGCAGACGATGTGGGTACTGGCCTATGGGCTGTCTAGCACCCACTGGGGGTCTTGGCACCTATCCTCCAGGATTGGGGGCTGCTGTGTATCAAAAACACGGCGAATGTTATTCAGTGTAAGGGAATAAAATGCTGACATAGGCTATGACATGATGCACCCTCGAGGACATTCTGGCTCAGTGAAGTCAGCCGTCAGAAAGGACAAAAAAAATTCCGTGGAATTCCACTTACAGGAGGTCCCATTAGAGCTGTCAAATCCAAAAGAGATGGGAAGGCGAAGGGTGGGTGCCTGGGGCTTGGGGGAGGGGACAGCGGAGTGCATTGTTTAATGGGGTGCAGAGGTCAGGTGGGAAGAAGAAGCGTTCTGGCGGTAGATGGTGGTGACGGCTGCACACCAAGCTGAAATATGCGCCCAGTTGCTTGCGGGACGTCTAACTGAAAAATCATGAAGATGGTTAAGTTTACGCTATGTGTATATTTCACACAATTAGAAAAGGCACCCCAGTAAAGTTGGATAAATGTTGACAAATGTGCTACATCCATGTAACTGCCACTCCATTCAAAGTTAGAGCCGCATTGCCATGTCCCCAGAAAGTTTTCTCCCACACTTGCCACACAATCCCCTTACCTCCACCCCAGGCAAACCAAGATCGGATTCCGGTCACTGTGGGATTAGTTAGATTCTTCTAGAGTTTTACCAAAGCTGGAGTACAAGCATGCCCGCTTTTTGTCTTGCTTCTTTCTCTCAGCATAATTATTTTGTGATGTAATCATCCTGCCTGCATGGGATCAATAGTTTCTGCTTTTTTACTTGCTGGGGAAATGGTCTTGTATAGTATCCATCCACTGCAAGACCCAGACAGGCTATCCATGACATGTATCCACAGCGTTGTTTTCCATTGCAAGGCACCCACAAGTCCCATGCACTCTATTGGGGAGCCTACACATGGTGTCCATTGCAGGTACCCATACGTTTTCTCATGTATACACCTCCAACATCGTGTCCATGGCGGACACCACCATCTCCATCCACTGGTATAACACCTCCACATCGTGTCCATGGCGGACACCCACACATTCTCATCCACTGTTATACACCTCCACATCGTGCTCCATGGCGCGACACCCACACATCTTATCCACTGTATACACCTCCACATTCGTGTCCATGGCGGACACCCACACATCTTATCCACTGTATACACCTCACATCGTGTCCATGGCGGAACACCCACACATCTTATCCACTGTATACACCTCCACATCGTGTCCATGGCGGACACCCACACACCTTATCCACTGTATACACCTCCACATTCGTATCCATGGCGGACACCCACACATCTTATCCACTGTATTAACACCTCCAACATCGTGTCCAGGCGGACACCCACACATCTTATCACTGATACACCTCCACATTCGTATCCATGGTGGACACCCACACATAAAATTATCCACTGCGATACACCTCCACTTTCGTGTCCATGGTGGAACACCCACACATCTTATCCACTGTATTACACCTCCACATCGTGTCCATGGCGACACCCCACACATCTTATCCACTTGTATACACCTCCACATCGTTCCATTGGCGGACACCCACACATCTTATCCACTGGATAACACCTCCACATCGTATCCATGGCGGACACCCACACATCTTATCCATGGATACACTCACACATTTCGTGTTCCATGGCGGACACCCACACATTCTTATCCACTGGGCATACACCTCCACATCGTGTCGTGGCGGACACCCACACATCTTATCCACTGTAGACACCTCCACATTGTGTCCGTTGCATTGTAATTCTATTGGTATGGTGAACCACAGGCCATTTATTTATTAGCCTTTTGGTGTAGTTTTGCGTTTGATTTCCAGTGTGGCGGCTACAATGAATTACTCGCTTTGAAACATTCACCTACAGGTTTGTTGGGTGGACAACATTGCTTTCATTCTTGGCGTTAAATACCAGAGTGGAATTGGTTGGCGTTCCTATGGTATAAGTGTAGGTTTAACCTCAAGGGAATGCGAAATGATTTTGCTGAAATGGCTGCTGCCGTGGGACACTGAGTATCCAGTTTGTTCCACAACCTTGCCAGCACTTGGCATTGTCAATTGTTTTTCATTTTAGCCATCCTGAAGCGTTTCACGTTCATGTTCCTTTTCTTCTGCTTAAAATTTTGTTTAGGTTCAGGCATGATGGCTCACGCAACTGTAATCCAAGCACTTTGCGGAGGCTGCAGGTGGAAGGATTGCTTGAGCCCAGGAGTTTGAGACCAGCCTGCAATGCAATGAGACCCCATCTCTACAAAAATTAGCCTGAGTGTGGTGGTGCACACCTTGTCTCAGCTACTCAGGTAGCTGTGGTGGGAGGATGTTTGAGCCTGGGAGTTCAAGCTGCAGTGAGCCAAAATCAAACCACCGCACTCCAGGACTGGGTGACAGAGCAAGTAAAAAAAATTTTTTTAAACTTCTCAGCTGCAAATAAAAATCATGTATCATTATTGTGTGGCAACACGTATACACTGTAGAGCAGCTGTGATTTTTTCTTTTCTTTTCTGCCTTTGACCACGATCTCTGTTGGCCTTCCTGCTCATCTTTCACTTGGCCTCCCCTGCCTGCCCCGCCCAGCCAGGAAGGGAGTCTGAGTTGAGGCGGTGGGCTGGGTGTTTGCTGTGTCCAGCTTCCGTGCCATGAGCCTGGTGCTGCAGACATTAGCCTGTGTAGGGCATCGGTCCTGTGTCAGAGGCTCACTCCCGTCCGGAGCTGCAGAACTCACATGCATGAGGCTGACTCCTGGGACCTGAGACCAGCCACCGCCTCCTTGGCCAGGGGCCCCAGACACTGCCTAGGGGAGGCAGGCATGCAGCAGGACTAGAAAAGCGGAAGATTGGTAGATGGTCTGGCAGGTGACGGGAGGGGAGAGCCTTCAGAGGGAGTGCAAGGTGCACGTCCTGCCCCAGGCCCAGGGCTGGCCAGGCCACGGGATGTTCCCTTATCTCGTCCTCACCTGCCCAGGTGTGAGTTTACAGCTCCGTGATACAGAAGATAAGCCAGGCCTTGGAGTGGTTGATGTAAGCCCCATTTGGGCCTCCATGAAGGAGATGCTTATAGGAGGGAGAAAGAACGGTTGAAAGCCCAGCTTTTAAGGGCCCGTCCCAGGGCCCAGCTGGGCCAGCCCAGCGGGGTGCCAGGGGGACGCGGAAGTGAGGAGGTAGGGGGCAGCCGTCCTAATGCGCCGTCACTTCAGCCTGGGTGTCCTCCTAGTCACAGGGCAGCCCTGCCACGGTTTCACAGCTTGCGCCTGCAAGCCAGGCTCTGCTGCCCCTGCTCTGGTGGACGGAGGTGTGCAGGGGCAATCTTAGGGGAGCATGGGGGCGTCCCACTCCACGCATGTCTCGGTTGGGTGGAGTTTCTTGTGAGATAGTTTTCTTCTGCTTCTGTGGGCTCTTCTGAAAAAAAAAGCGGCGGGTGCCGGCCAGCGTGCACAGGTAGGATGAGGGTGGATGGGGATTTATGCACCTCTAGCTCTAAGTCTCCAACTCAGTTCTGCAAGCCACAGGTCAGGGTCAAGAAATGGCGGAGCCTTGCTCCAGGCCTGCAAGGTGAGTGGGCAAAGACTGGCAGCACACCAGTCTTAAACACTCAGGGGCTCCCGACGGCTCCCACAGCACTCCCTATGCCTCTGGGAGCACCACGGTGTGCAGCGGCACTGGGTTGCTCTCCGGGAACCAAGGCCCAGGTATGCATTAGGTCGGGACCCACAGGACTGAGCAGCTCCCGGTTCACAGAGGAACACCAGGCTTCCAGCCACATGCCTATGTGAGGCAGCCCCGGTGGACACGGGGACAGTGAGGGCCTCCTGTCCTTTACTGTGGCCAAGTTTACACCACCTTTGAAATGCCCTCGGAGTTCTGGCATCTGGGGTGGGGAGCTGCGTCAGTGCGGGGGACTGGGGGGCTTGTCTTCTGCGTGCCCTGGGCTCCCCCTCCCGGAGGGCCCTGTCAGAGGCCCCACCCCACGTTTGTTTCTCTTCTGTCACCCCAGAGGTGGGGAATTGTCTTTAAGCAACTGCTTTCATTCAGCTGATAATCTATCGCAGTTTCTCTTTTAAAAAGTTTAATCAGAGGACATCCCGGATGCCATCTGAGGTCTGATCAACCCGGTCACCAGCGTGCCCACATTGGCGGGCAGCGGGATTTCCAGCCCGGAGCACGGAAACTTGACGCTTCTCGACAGCCTGGAAATGTAGGATTTTCCGGTTCGGCTTGTTGTAACACTGAGCCCAGCTCCAGGGACCCTGTCTCCCTCTTCGCAGGCTCCCATGGGGGGCTGGGGGAGCCAGGCGGGGCTCCGGCAGCGGGTGAACTGCGCTCTGTGGGCTGCCTCCGCTCCCAACTGTTGCTTCTCTGCCCCTCCAGGAATTCTTCCAGAATTCCTCCCTCAACTCTCTGCCCTGCAGGTTGCAAGCAGGGGAGCCCGCCCCGGGCCAGCCCTTCCTCCGCCTCCCCCGCCACTCAGGAGCGCAAACGGGTTCTGCGCTATCTTGGCCCTCTGTCGCCTTGTTGCGAAATGTAATCCACAAAATGCCTTCGTTGGGTAACCTTATCCTGGGCAAGCCCGCGTCAGCATCTCGCGGCCCCGTGACAGCCAGGAACTTCGCAAGCATTGAGTAATAATGCAGACTTTCAAAAACCGAGGCTGGCAGAGGGAGGCGAGGGCGGGAATGAAAGGCGGTTGGCCTGTAATTGGGACATGTGAACTTCCTCGGCAGGAGGATTAGAGGAGAGACAGCCTTGCCGCCGAAGATTAGTTTCAATTAGACCGGGCTGGAGGCGGAAAGGCCGCGACTCGGCGAAAAAGATTAAAACAAGAAGGAGAACGTTTCCGCGGCGCAAGCTTTCCGGGCCTGCAGCAGGCGGCCGCAGACCCACTAATGGAAGGCAGAGCGTGCACCGCCGTTCGAAGACTCGGCTAATTGATTCGACGCTTGCTCTTTTGCTTCGTCTTCCCTGCCTCACCCGCGCCCGTGCCACTTTTCAGATACTCATTTGTGCCTAACCACTTTGGAGGGGGGGCCCTGGCCCCGGCTGTGCCTGCAGGTCAGGGGAGAGCTGGGCAGGGTGGGGCAGCCCGCCAGACACTGGCACCGTTGCCCCCACTTGCGGTTCCCATTTCTTAGGCCACAGGGCCATGGGTGGGACGACTGCAGTGCTGAGATTTCTGCAGCCTTGGCCGGTCCGTGCCGCAAGCCGTGACCTCGGAGGCTTTGCTGGATCTTCAAAGCGGGCTTTCAAATTGCAGGTTCTGGTGTGTGCCCCCACCTCACCTCCTGGGGCCAAGGCCTATGTCTTTCCTCCCTCCTTCCTTTCCTTCCTGGGACTCTGCCTCTGTAAACTTGAGAATAGTTTTCGTTAGCAAAAACTGTAGACAAATGCCTGCAAGTTGGAATGTTTCCATGAGCGGCAGTTCGCTTCTGAAATTTTCTGGGTCGCGGGCGGTGGCTGGCACCCCTTGGAGGTCAGAAGTAGCTTAAACACCAGGGGCTAAGGGCTGGGGATGGGGACTGCGCTGGGCCACAGTCCTCATCAGAGGCCTCACGCAGGAGGCCAGTCCCTCCCTCCCTCCGCCTTCCCCTTCTCTCCTTCTTTCTTCACTTCGACCGAGACCGGAGCTAGGGGTTCGGGGCCCCTCCGTCTCAGAACCTACCCTTCTTCTCTTTACCATTTCCGTGGGAGGTCAGGGAGTGAGATCCCTAGCCCACTCCAGGGAGGCAAGGGGCACAGAGAGGTGCGTGGAGCCTGACACGCCAGCCTGACCTCCTGCTTAGCCTCCCAGCTGCGGGGCCTATGCTGCAGGAGCTGCCGGATCCTGGCTGGAATTCCTCATCTTGTGACGTGGAGGTGGAGCCTGGCACTGCCCAGTGGATGCTGTTGCTCCTGTACCTGAGACAGTGGGAGGGCTGGTCCCCGCTCATGGGGCCACTGTCTTGTCCATGCAACCAGGCCCAAGCTCAGAAGCCCCGCGGGAGGTATCTGTGTGCTGCAGTGGACTCCATGCATGAGCGTCGGGGGCAGCACTGTGTCCCTGGTCTGGGAGCCAGAAGAGGCAGTCCGGGTGTGGCTTTGAGCACCTGGCCTGCCGTCTCACAGGCAGAAAACCAGCTGCCTCCCGGCCTCCTCCGCTGCTTCCCCCAGGCCCTCCAAGCACGAGGTTGTGTCTGATGTGTGTGTTTTATCAATCCTTCCATTGTAATGACAGCTAAATTATGAAAAATGCATTTTTCACAGCTGGCTGAGAAAAACCCATTAGCATTTAATCAAGCGATCCAGGCTCATTTGGGGATTCATAGGCCGAGTTTTGTTTGCCGTAAAAGTCACGGACGTGCTGAACAGTCGTTTAGTGGGTTCACTGGAAAAATGGGGCCGAATCATTTCTCTTCCACGCCGTGCTTCCTACCAAGGGACCACCTCCTGCCTGGGGTCCAGGCTGAGCTCAGTGCTGGGCCCCTGGTGGGTCACTGCAACCCTCACCCTGCTTGCTCAGGTGGCAAAGCCTCTGCTTTTCAGGGACCCACCCACAGCAAGGGCCCCTTGTATCAGGGGCAGGGGATGCCGTCTTGCTGACATTCGTGGCGGCTGGCTTGCGTTGTTGGTAAGGACGGGAGGCCCTCACTGTCCCGGCGTGTCCCACTGGGCTGTCAGCACTGGGCAAGTAGCCGGAGAGCCTGCGTGTCCTCTGTGGAAACCGCGGGGCCTGCCTCAGTCCCTGAGTCCCGACCTCATGCATGTCTGGGGCCGTGGTTCCCGAGAAGCCACCCAGTGCCCTGCACACCAGTGGGTGCTCTGAGATGCAAGCGAGTGCCTCGGGAGCGGTGGGACCCCAGGTGAAGTATCTAGATTGAGCTCTGACTTGCATTAAGTGATTTTTAACATAAATGTTTTATTTTGGAAGAATTTTGGATGAACAGAAGAAGCAATAAAGGGCATGTATAGAGAAGTCCACAGCCCTTTTTTAGGATTTTTTCCAAAAACCCCAACAACCCCAGGCTAGACACGAGAAACACATCCGACATAACCCAGGCTGGTGCTTCATCCAGGACCCTGGCCTCCTCCCGAAGACAGTCCTCCTGCCCCCATCCCAGGCTCCCTTGCTCACACCCTGTGCCCACGGGTGGAGATGCGCCAGGGCACACTGCACACCCTCGCTCCGGGCGCTGCTCTGGAATTCACCAGTTTCCACATCAACCATTCAGGAAGTGCCTAGGGAGGACACAGGCTGTGCTGCTGCCTTGGTGTTGGCCTCCCCACCCACCCGGACCCCAACCCTCTAAGTTCCAACACCAACAGGGCGTTTGCTCCCAGTCCTGGAATGGCCTGCCCCGCAGAAATCTCCCATCACACTGGCCTCTCTTCACCCAATCCATCCCTTAGGGTTCAGTTTAAAACCCCAACCTGCAGCGTCCCCACTGGCTCCCTGACCCCAAGAGTCTCGCCCCCCTTAGCACCCAAATTGTGCTTTTGTCCCCAACTCTCTCAGGGCATGAAACAAGTCTCTCCCATACCCCTGTTAAAAATCCACCCTGCCAAAACTATGGATATGTGTGCCTGCAAGGGTTTTGGTATACACATGGCTGTGTGCGCAGGTACATGTACCTTACACACATCGTGCCCAGGTATGCACAGACACGATACACACATTGTACCTGTGCACCACATATAATGTTATACAGCACCACGCATACGAATTGTATAATTGTATACAACACGCATGCAGACCTGTCAGTACACAGGGTAGTGTACATACGTTATGCACACCCCGGTTGATATGCACCCATGCTTTACCGTCGCTGTATCTGCTGAGGGCCCAGCGGGCGCCCCAGTGGCCATGCACACGCCCTGCACCAGATCCCATTTCTAACACCGTCCCAGTGAAGGGGCGGAGATCTGCAGAGAAGGGATGGTCTATGACAGGACAGGCGAAAATTCAAGATGAGCCTTGCATCTGTGGTCGCCAAGGAAATGAGGAAGAGTTGAGAAACAAAGCGATGCGGCAATAGATGGCCAAGGAATGCAGGAGCTGACCTGGAGGAGCTCCTGAGGCCACACTGGAAGGAAGGTGATCCACAAAAAGGGCAAGCATTGGGTTATAGCTCCAGAGATGAAAAAATACCCACCTGTCATGCGCCATAAAGTTAAATGAGGAAGGAAGGGAGGCGAGGGGAAGGGAGGAGAAAGGAGGAAGGAAGGAAGGAAGGAGAGGAAGAAAGGAAGGGGAGGGCAAGAAGGAAGGAAGCAGGGAGGAAGGAAGGCAGGAAAGGAGGAAGGAGGAAGGAAGGAAGAAAGGAAGAAGGAAAGAGGAAGGAAGAAAAGAGGAAAGAAAGGGGGAAAGGAAGGAAGGAGGAAGGAAGGAGGAAGGAGGAGGAGCGAAGTGAAAAAAGGAGGGAAAAAAGAAGGAAGAGAAAGGAAGAGGGTGGAAGGAGGAAGACAAGAGGGAGGAAGGAGGAGGAAAGAGGAGGAAGAAGAAGGCAAGGAGGAGGAAAAAAGAAGAGCAGAGAGGAAGGAAGGGAGAAGAGGAAGGAAGGAGGGAGGAAGAGGGAGGAAGGAGAGGAAGGCAGGGAGGAAGGAGGAGGAAGGAGGAGTAAGGACGGAGGAAGAGGAAGGAAGGAGGGCAGGAAGGAGGGAGGAAGAGGGAGGAAACAAAGGGGGGGCGAGGAGGAGGAAGAGGAAGGAAGGAGGAGGAAGGAGGGAGGATAGGAGGGAGGAAGGGGGAGAAGGAGGGAAGGAAGAGAGGGAGGAAGGAGGGAGAAGAGGAAGGAAGGAGGGAGGAAGAGAAGAAGGAGTGGAAGGAGGGAGGAACGAGGGAGGAACAAGGGGGGGAGGGGAGTAAGAGGAAGGAAGTGAGGGAGGAAGGAGGGAGGAAGGAGGGAGGAAGGAGGGGAGGAAGGATGGGAGGAACAAGGGGGGGAGGGAGGGAGGAAGAGGAAGGAAGGAGGAGGAAGGAGGGAGGAAGAGGAAGCACAGGGGGGAGGAGGGAGGAAGGAGGGAGTAAGGAGGGAGGAAGGAGGGAGGAAGGAGGAGGAAGGAGGGAGGAAAGAGGGAGGAAGGAGGGAAGAAGAGGAAGCGAACAAGGGGGGGAGGAGGGAAGGAAGGAGGGAGGGAAGAGGAGGAAGGAGGGAGGAAGGAGGGAGGAAGGAGGAGGGAAGGAGGGAGGAAGATGGAAGGAAGGAGGGAGGAAGGAGGGCGAGGGAAGAGGAAGGAAGGAGGGCAGGAAGGAGGGAGTAAGGAGGGAGGAAGGAGGGAGGAAGGAGGGAGGAGGAGGGAGGAAGGAGGGAGGAAGAGGAAGGAAGGAGGGAGGAAGAGGAAGGAAGGAGGGAGGAAGGAGGGAGGAAGACGGGAGAACAAAGGGGGGAGGAGGGAGAAGAGGGAAGAAGGAGGAGGAAGGAGGGAGGAAGTAGGGAGGAAGGAGGGAGGAAGTAGGGAGGGAACAAGGGGGGAGGAGGGAGGGAAGAGGAAGGGAAGGAGGGAGGAAGGAGGCTAGGCAAGGAGGATGAAGGAGGGAGGAAGGAGGGAGGAAAGGAGGGAGGAAGAGGGAAGGAAGGAGGCGAGGAAAGGAGGGAGGAAGAGTGAGGAACAAGGGGGAGAGGAGGAAGAGGAAGGAAAGGAGGGAGGAAGGAGGGAGGGAAGGAGGGAGGAAGGAGGAGGAAGAGGGGGAAGAGGGAGGAAGGAGGAGAAGAAGGGAGAACAAGGGGGGAGGAGGGAGGAAGAGGAAGGAAGGAGGGAGGAAGGAGGGAGGAAGGAGAGGATAGGAGGGAGGAAGGAGGAGGAAGGAGGGAGGAAGGAGGGAAGAAGAGGAAGGAACAAGGGGAGGAGGGATAGGAAGGAGGAGGAAGGAGGGATGAAGGGAGGGAGAAGGAGGGAGGAAGAGGGAGGAAGGAGGAGGGGAAGGAGGAGGTAAGGAGGGAGGAAGGACGGGAAGAAGAGGAAGGAAACAAGGGGGGGAGGAGAAGGAGGAGGAGGAAGAGGAAGGAAGGAGGAGGAAGGAGGGGGAAGCAGGAGGAAGGAGGAGGAAGGAGGAGGAAGGAGGAGGAAGGAGGAAGGAAGGAGTGAGGGAAGGAGGGGAAGGAGGGAGGAAAGGAAGGAAGGAGGGAGGAAGGAGGGAGGAGAGGGAGGAACAAGGGGGGAGGAGGGCAGGAAGAGGAGGAAGGAGGGAGGAAGGAGGGAGGAAGGACAGGGAGAAGAGGGAGGAACAAGGGGGGAGGAGGGAGTAAAGGAGGGAGTAAAGAGGAAGGAAGGAGGGAGGGAGGACAGAGGTAGGAAAGAAGGAAGCGAGGGGTAGGAGGAAGAAGGCACAGATGTGTTCTTGTTGAAACCCACAGGTGCAGGTACTCCCCCGTGGAAGAATGCACCTTAGCCCCCACCCACCGCCCCCAGTCACCTCCAGGGGTGCACCCCTGGCCGACTCCACCTTAGCCAGAGCCCACTCACTGTGGCTGCATCTCAGTGGGTTGCTGTTCCCACCCACGTCACAGACGGGACAGCTTCAGGGAGTCCTGAGGACAGCTGCCTGCCTTGGGGTCATTGAATTGCCATTTCTGACCCCTGGGCTCTGGCCTCAAGGCTTGGAGACAGTTTTTTTCCCATTTAAAACCTTGACTGGTAAAGACCTGTGACCTGGAAGTTCTCTGTGGTGGCGGCAGCTTGCCTGTTGGACTCCAGCCAACCTCTAGAGTCATGGTTTGGTGCCCCCCTGGAGGTTCAGCGAATGCCTAGACTCGGCAACAGGATGGGCCAGAGTCGGGGAGCCCCATGCAGTGTCCTGGCTCAGCCCCTGCCTCCTGGGTGGACGTTGGACAGCCGCTGGAGGTCTCAGCCTCTGTCTCTTCATCCATAAGGTGGAAATGACAAAAGCTGCACTTGGCCCCGAGGACACTACGGGGTTGCAGGGTCAGGCGGTCAGGGGTCGCAGAGCACTGCGGTCCCGTTGTATCAGGGCCCTGAGGAAGGGTGACAAAACTTTTCTTCATGCTCCGCATCACGATAACCAGCCTCAGTGGTGAAATGGAGTGAAGGCTTTTTGCCACCTCTGCTACTGGGGCCTCCACAAGGCTGATTTCTGCCGTCCACACATCTTGGGCCCAGGAAGGCCCCTAAGACAGTGAGTTTGTCCACGCCTCTTTGACCTCACCCACATAACTAGAGATGGGGGGTCTTTGGACTCCAAAAGGCCAACCTGACTGCCCTCCCCGGTCTCTGCCCCCAGCCCTAGGCCGGGGGCCAAAGGGGAGACCATGCCACACACAGCAGAGGTCTGCAAGCTTCAGGGGGACCCGCAGGGCTGGCAGGATAACCCCTCTGCTAAAAACCGCCTGGTGGCCGCTCTCCCGGGAATTCCTCTTCCTGGCGGGTCAGGCCGGCGACAGTCGGGAGGAGGTGCGCTGAAGGGCCCTCTTTTGCCATCGGCAACCATTTGCTTCCTGGTGAGCCCCACCAAGCCCGGGCGCCGCGCTCAGCATCCATGTGGACACCCCGGAGTGCCGATCATCCGTGGTGGGCGAGCCTCCTCCCGGTGACATCCCGGGAGAGCCACCACCCTCCCCATTGTCGGTGGCCAAGAGTGTAATCCTGAGGGTTTTGCTTCTTCCTCACTGATCTCTAAAAATTAAGCAAAAACAAACGCAGCAACACGTCACCGGGGCTTTCCCCGTTGCTGGGGACACCGCCGACAGCCAAGGTCTTGCCCATCCCTGGCCTGTCCAGCAAACCTGGCTTCCCTTTGCCTCTGTGCTGCTTCCCTTCTGGCCTGGAAGACCTGGGGCGCCGCCATGCTTGGTCGCCGGCGCTGTTTCCCTCCCCTCCAGGACACTTGCGGAACAGGTGGATTCAGAGGCTGAGCCAGGGCCCCGTCTCCCCCAGGCAGCTGGCAGAAGGGAGTTCTCTGGGCGTCAGAGAAGCCTCCTCCCTGCCTTGGTGGGGCCGACTCTGTGGTTGCATTGAGAGTGGTCCAGCGGGGCGTGGGGGCTGCGTGGGAGGCCAGGAGTTGCAATAGAACCCACAACCTGTGGGCAGGACTCTCTGAGGAGGAGCAAACCCAGGGAGAGGACCACAGGGCGTGGGGGGCTGGGAAGCACTCACCAGGGAAGCCCTTCAGTCCCAGGCACATCTCTTGGAGCGGGTTTCCCTGAAAGACCGGCCTGTGTGGTCCCAGCCTTGCACTCACAGACATGCCTTGGCCAATGAGAGAACGCCCCACTCTTCTGGAGCCGCGCCCCAGGCCCCAGCAGGCTCCTCTCAGGGCAGAACGGTCACTTGCTGTGGGTTCTGTCTCTGGGGGGCCCTCCTTGGCGCCAAACACATCTGGCTTTTTTCCTAAAGTCAGCACCGCCAGAGCCGGGCCAAGTTTAGGAACTGCCCCGTCCCTTCAAGGAGCTGGCAGAAGGAGCCTCTGGGGGTCAGAGAAGCCTTCCTGGCTTTGGTGGGGTCATGGAAGAGCCTGTTCAACTGCCCATGGCCATTCCAGCAGGCCCTTGGCACAGCCTCTGCAAGGGAGCAGCCTCACCTGGTTCAACCAGAGACCAGGCATCTCTGCCCTGCAGGCGGGCCCTGTCCTCAGACCTGCCACGTTTACCACTCTCCCTGCGAAAAGGCCTGTGGAGCTGGGAGTGTGCAGAGAGGTGGACCCAATGAAAAAACCCACCCGTGCCAAACCAAAGACCCTTCCTTGCTCCTTGGAGCGACAGTTTTTTTCCCAATTTATAAACCTCAGATTCCAGGAAGGGAACTGAGCCTCCCGCCTGCGGCCCCCAGGAGGAGCTCGTTGCTCAGGAGGTGCCCGGACCCTGGAGCGTGGAGCCAGGGATAGGCCTCTGGCATCTGGGCACTGGGCCGGAGGGTGGATAACCCAGCCTGCAGACAGACCTGCTCCCGGCTACGGTCGCCAGTGCATATCTGGACTCCGTTTTGCCCTACTCAGGGCTGGCAGTGACTCGACTGAACGCAGCCAGTCTCTGAAGGGCCGGTTGTGCTGATTTCTTTATGAGGTGGAAAGCGCAGAGTCCCCCTCTGGATTCACACACCTGGGGAGGCGTCCTGAGTGGACTCCTCGGTCCAGAGCCCGGTGAGCACTGGCACAATGGTAGGGCAACAGCACTGCCTCCTGAGTGAGCTGGACCGGAAGCCTGTGTCATCTGTTAAATTAGTGTGAGCATCCAAGGGAGGCTGATCAGGGTTTCAGAGATTCCTGCTCACTGGGGGGCTGAACGAACCGTCAGGCTCTGAGCTGCAAACTTGCAGAAGGCGCACTCAGGGCCGTTGATCAATTTGTTAGCGATAGCCGCCATAAATACTCTGATTTCCCCATCTGGCTGGACAGCTCCGCAGGGCGCTGACGTTAAACTAATTGCCCGTTGGTGGGAGGCTGTTGCGGACGGGGCCCCCGCCTCTCACACCTTGCCGCGCTTCCTGGATAGCGGTGATAGGGATCGGCTCCATCCACGGGCCCCACAAGGTACTTCAGCAGATGGGTGAGACCAAAGGCTCTTGGGGGGTTTTTATGTCAACTCGGTCCCACTGACCTTTTGGGTCACAAGAGGGGCGTCACCAATAAAGGGCCGCTGCAGTCCCAGAGTCTCTTGGAGGTTAAAGCCCTCAGCACTTCCCTGGGGGGGGGGAAACAGCAAGCTGACCCTGGCAGCTGGAAACACTCAGCCAACCTCTTCCAGGGAGTCCCCCAGTGACCACTCACCCAAACCCCAGACACGAGAGGAAGATTTTAAGGGGAGTCCGAGATGCTGGCTTCCAACCAGGCAGAGGGCACCTCCCCCGTCATCGGGAGCCCAGCCCAGGAACGGCCACACCTGGGCGAGCTGGGGGTCTGTCCCTTGGGGCAACCTCCAACCTCCCAGCTTCTCCGTGGCCTCTCAGTATTGCTGGGAAATGAAAAAGGCTTGAAACAGCGGAGAGGCCAAGAAACCCCGCCCCGAGGGGCCTCAGTCGCCTTGCATCCCAGGGGAGAACCAGGAGAGGACAGAGTGCATCTGATCTGGGCTGCTGGTCATTGGGGGGTTGGCTGGCCATGGGGGTGCCTGGTCATAGGGGCTGCTTGGCCCATGGGGGTGCTGCCCATGGTGGTGCTGGTCATAGGGCTGCTGGGCCATGAGGGTTCCTGGCCAATGGGGAGTGCTAGCCTACGGACGGGTGGTGGCCACGGGGGGTGGTGGGCCATAGGGGTGCTGGCCACGGGAGGGTGCTGGGCACTAGAGGGCTCTGGCATGAGGGGTCCTGGCCATGGGGGGTCCTGGCCATGCGAGTGCTGGCCACGGGGGGGTGGTGGCTATGGTGGGTGCTGGCCACCGCTTTAGGGGCACTGGCGGCCAAGGGGCGAAGCCCGGAGGCCTCAGCCAGGCACATTCACCCCAAATCCCACAATCCCATGAGGAGTCCGTGAGGCATTCCTGAGCGAGGACCCTGCTTCCTTCAGTCCCTTAGAACCCTTGGGGAGGCCGGTCCTGGGAAGCCAGGCCCAGCTGCAGATGCGGGGTACCCTCAGGCCTGGGTGGGATCGAAGAAGGCCACACCACATGGCCGGCTGCATTCCAGAAGCCCCAGTCCATGTGGTGGGTCTGAGAAGTAAATGCTGACTTTGAAGGGCACAAGTATTTAGGAAGCTGCAGGTCCGGCGGCCACCCCGGTTGGTGTTCCTCGGTGCCAGTGGGACGGCCCCTCGACAGCTTAGTTGCGGCTCTACTTTCAGGTGGGCGGAACCCCTGGGGTCTTTTCCTGACCCCCCACCCCCACTCCCTCCGGGCAGGGCCGGCTCTCGGGGGCGGCTGACTCCAGCCTCTGCTTCTCCCGAATTAAGACGGATGGCGCTTCTCTAAGAAAGGAAATGTATATCAACAAACTTCCATCCCGGAGATCAAACCGCTTCCTCCCGCCGCTCCCCAGACACCTCCGTGGCTGCCCCCCCTCGCCCACCCCACCCCCCAGGTCCTGCTGGCCTTCCCTGGCCCATGTGCCGGCTCGGGCGACCTCAGGAGGGGGTGGTGGGGGTTGCCTTGCATCGAAGCAACAGTAGTCCACTGCCCCGTGTGAGGCTGAGCTGGGCTGGCCAGAGCAGGGCCAAGGGGCCCTCTGCACTTTCAAATATCATTAGAGTCAGCGGGCTCCCGCAAGCGCCAGAGGAGCCCTGGGGGGAAGCCCCTGTCCATGGCTTCCCAGTGCCACCAGGTCAACGGCCGTTTCCTATCAGGGGATCTAAAATCCCTCCCCCAGGAAATGGCCTGGCCAGGGAGGGGGACTGGGAATTCCGAGCTCCTGTCCCGGCTGTGGTCTTATTTGAGATGGCATTAAGCCCCGGGTAGCATCGCCTCCGGAGCGAGCGAGGTGGTTTGGGGGGCGATTGGGCGGCTACAGCGTGGCTGGCAGCCTCCTCCCATTGCCCCTCACCCCTGGGTGGGAAGCCACCAGCTCTCAGAGCAGTTGGTTATCCCTGGCCAGCAGCACTGGGTTTAAAAAAGCCAGAGAGTGTGGCGATGGGGAAGATCCAGCCACCCACCCGGCCTGCTGAACCGCTCCAACCACCTTTTCAGGGAGACGGCTGCTGTTGTGCGCAGGGCTCCCCAGGCAAAGCTTGGGGTGGGGCACCAGCAGGGGCTCTGGATGGGGCATCCTGGAGGGCGGAGCCTGGCGTCAGGGGCTGACGTGCGCCCAGTTCACGCCTTGTCTAGGGCCTCCCTGGGACGGTGCCAGTGCTTGGCAGGAACAGACCCTCCGTGCGCCCTCTTTCTGGAATTGGCCGCTTCCCCTCGAGACTCAGAGCCCCATGAGGACTGTGGGGGGACACGCAAGTCTGTGCTGGGGGAGAAGCTCGTGGACCTCCTGGGAAAGCTGGAGTTAACATACCGAGCCAGGCCGGTGGGCTCCATGGGCCAAGAGACCCCCACAAAAAGCCTGCCTCTAGCCGTGCACCTCTGCTCGGGCTCCCGGGAGGCAGAGCCGGATTTCCAGCTCCCCCCCAGGATAATGCTTGCGGGGCATCATTGTGGCTCAGACCCCTGGAGCTTGTGTTCAGAGGGCAAGGTGCTTCCTGGCTCCAACCACTGTTCACACAGGGTGGGGTCTTGCAGCTTCCCCTTCTGAGAGGCTCTGGCCTGGCAGGGTTGAGGTCCCTGACTGAGGACAGGAAAGAACGGGGGGACCGTGCGCACTTCGCCTCTGACCAGCGCTGGTGGCAGCTGTGTCCACAGAAGCCTCCGCAGGAGGATTTCTCACAGCCCAGCCCAGCCGTGAGAGAGAGCCGAAGGCCTTCAAGGACAGTGACGCGTCCAGGACCCTATGGGGCCAGTGCCAGCCAAGCCTTCAAGCAGCTGTGCCTGCCCTTGCACTGCGTTTGCCTTTCAAGCAAGGGAAGGTGGTAGGTGCAACTGTGCTCTGAGGATGAGCAAGGATGAGAGAGGGGACCCGAGACAGAGACAGAGAGTTGAAAGGGGGAAGGGGAGGTGCCGTAGAGATGGAGGTTCTGAGACCTCACTCAGGGCATGGCCTAGGTGCTGAGGCGTTCTCCTGGCAGCTCTGGGTCTGAGACCCTGGACGAGGGCTGGCCTAGAGAGAGCAGCTACTGCAGAAAGGCTGAACTCCTGGGGAATCTGGCTGCCCAGGGGCCTGAGAGGGTGAGGTGGGGCGACTATCCAGAGGCCTCATCCTGCTCCCTTTCCTGCGGCCTTCAGTCCGGCCGTCTGGGTGCTGTGCAGGATGGGCTGGCTCTGAAACAGTGATCACCGCGCCACGCCACGGGGCAGCCTTCTGGTGGAAAACCAGGCGTTTCCCTGCAAGCCAGGGCTGTGCCAGAGGCTCTGGGATCAACTGGTTCAGGCCCCACGTGCTTGAGCGGACCTGCATTCTCACTGCATAGGGATACTTGGGTCCTGGAGCGTGAAGCACTCTCCTGAGACCCCCGCCCCAAGCTGGGCAGCCTCTGAGCGTCCGCACCCTATCCCACACGCGGTGACATGGAAGGGGCCCTGCGTGCTGGCTTGGGACACACTCCCTGACCTGCAGGGGCCCCAATACCCAGCACTTCACTCACACCGCGTTCCCATCCTGCAGGCTGCGCACCCAGAGAGGATGCGGCTTGCGGCCCTGTGCAGAGGGGAAGACAGTGGCTCAGGGACACCAGCCACAATGCCAGGGATGGTTCTGCGCCGAGTGGGGCCCTCCATGGGGGCTTGGAGCACCCCCCATCCGGGCTTGGCCAAGCGCTGCCTGGCCTGAAGGTTGACGGAAATTAGCTCAGCAGCCCTGCCCGGCCAGGCGTCCTCGCCCCTTCTACGCTGGAAAGAGGCGGCAAGCTGTGTTTATTTAGACTCCCTCAAGCTGACAGCTTGGAATCAGGCTAATTTACCTGAAGTAACACCAACCGTCTCTCTATTTATTTTTACGATATTTCACCAGCGTAACCAATCCCCACCCCTCACCGCCTGTTTACCGTGGCCCAGGACAGCCGCATCTGTCCCTCATAGCCCTCGGCTGCTGCCCTGCCTTTTCAAGGACGGCAAAGACGTTTCGAACGGGGGCGCCCGGGGGGCAAAAGGCTGGGCTTGAGGACAGCATGGGCGGCACCCGGAGCCTTCGGGACTCAGGGTGTGGAGTGGCCGTGTGCAGTACGTGCCCACAGGGCTGGGTGAGGCCTCAGGGTGAATGGCCGGAGGGGGCCTTGCACCTGCACGAGGATTCTCCTCACCTGGCAGGGGAGAGGAGCTGCTGGCGCCCAGCCCAGCAAGGAAAGCAAGGAGGCGCCCACTTTGACCCCAGGCGGCACATGCCGCCTACTCAGGTTCCCTCACGCTCGGCCCGCGAAGAACCATGACCCACTTTTGCAGAAAGGAAAGACCTGCGGACCTGGAGTCACTCACCCAGCCGGCCATCCAGGAAGCCCGGCTCTTCCCAGGGAGCGTGCTGCCCAGGCTCAGCGCATGGGCCAGGCAGGCTGGACAAGTTTACCCCAGCGGACAGGCTGGGGCTGGCTGGAGCAGAGAACACCCTGGCCCAGCGAAAGAATCCACAAGCCACAAGAGAGGCCGTGCCTTCTGTCCCTAGGAACAACTCGACAGAGGCAGAGACCACGCCACCACAGGTATGGGGTTTTGGCTATTAATCCTGACAGAAGAAGAAGCTGGAATGGCTGTGTGCCACCTGAGGGAACCGCTTGCTGAGCCTTTGCTGGTCCAGGGGCTCGGGCATCAAGCAGGACTCCAGGCGGCCACCCAGAGGGCCATGCTGTGCGCGGGACTGGGTGTTGGGCCTTCAAGCGTTGACAAACACCTCTAGAGTGGGCTCTGTGCTGGTGCCAGTTTCCCTGGTCCGAGGGTTCCTGCGGCCACCAAGGAAAGCCCTGCCCCAGCTTGCGTGGGAGCTGCCCGGCCAGGCTAACCACAAAAACTCGCAAAAGACAAGTGACAAATACCTTTGAGAGAGGTTGGAGAAAGCAAAACTGAAATAAGGGGCCCAGATGAAGGGTGTTCCGTGCGGCAGTTAGGAAGGGCTTCCTGGAGGGAGGTGAATTTGGTGCTGAGGTTGGAATGCTGAGGCTGAGCCTCCACAGGAGGTCTGGGCAGGAGTCCTGGCAGAGGGCGGCCTGTACAAGGCTCGTGGCGGTCGAGGGAGCTTAATCCTGAAGCATGGTTGGGCTGGAGTGACCAGAGAGCTCCGAGGGCTTGTTGGGAAGGTGAAGGCCACGCAGGACCTGGTGCTCACAGAGCCGGGGGCAAACATGCGACCAGCCCAGCTTCTCCCAGTGCCCTCCAACGCCCTGGGCAGGGAGGAAGCGCATCAGTGATGTCATCCATCATTCCTGTTCAGGATGTACTGGGCGTTACGGGCAATTGTAAATTAGATTTCTACCACCATCCAAAAGTGCCTCCAGGACGTTTTCTTTTCCTGAAGTTGTTAACAACAGGACAAACTCTAGAGTTGCTGCTCCCCTCTGCCCTGGATCCGTGGCCATGACAGGGTGGCTGTCTCTGCAGCGGGTTTGGTCACCTGCAGGACAGGGGCCCAGCCTGCCCGTGGGGTCCCCTGCCTCCCTCCAGCCCCTCCACTCCCCTAAGCCCCAGCCTCCTGGCCAGGGCGGAAGGCAGCCTCTCTTTTCTCACACCCTGGGTGCCTCAAGGGGCAGTGCTCACCCCGAGCTAGGGGCTTTGTGGCCCCCGGCCCTGGGGGCTGATTTGGAGGTGAGAGCGCCTCAGTGCCTCTCAGATTCCCAAGAAGGAGGGCCAGTGGCCTCCACCATCCCGGCCTGCAGCCCCAGGGCCACTATGGTGCTGCCTGCCTGCGGGCATCGTACGGAGGCCAAGGGTTTCAGGGGCCTTTGGCCTCTTGCCCTGCAAGAACGTGAGCGAGCCATTCCCTGATGTGGGGCAGAGGCGGCGAGGTGAGGGGAAGGTGGAGCCAGGCTGGGTCCAGGCAGGCAGGCACCAGGGGTCAGTGAGGGTGGGCCGGCCCGGGGGGATGCCCTGTCGCCCGTCTGCAGTGCCAGCTCTTCTCCTGCACGCCTCCCTCCCGGACGCCATGCGCCTTGCTGCGGGCCATACGTCTCTGTCAAAATCTCTATGAATAAATTAAACCTTTTTAAAGATTAGTGCTCTCTAATACCTCAGGGTTTTTTTAAACACAGCAAATGCTACAAATATTTTGCGAGCATGGCTGGCGTTTGCAGCGGCTATGCCGTCAGCAAGGCCCCACCAGCGTCCCTCCATGGGCCGGCCCTGCCAGCTGACCTCCACCAGGCTGCCCTGACACTCCAGGAGCAGGTTTTCCGGCCCCCATGGGGAGCAGCATCGCCCTGTGGGGCGGAAAGTTGAGGGGACGTCCACCGCCAACAGGAGGCAGGAGGGCGTGGCTGTGCCACGGCAGAGATGTCCCGTTTGCTGCTGGCCTCTTCCTCTGAGTCTTTGTTGCACAAGATGGGCTGGGCAGTCACAGTCCCTGTGAGCTGTCCACGAAGCCACCTGACTCCTGGGGTCAGATGGGGGCTGGCACTTTCTGTCATCCCACCTCGGTGCGCCTTCCTCTGTCAGCCAAAGGGCGCGGTGGAAGCAGTGTGAAGGCGGTGGCAGGGGGTTTTACAGTCAGGGCTGCGGCTTTCTCCTCAGTGGTTGAGGAAGGTGGGCGACCCAGGCAGGGGTTTGAGGTGCAGGAAGGCAGGAAGTTGAGAAACAACGGCTTTTGGGGGCCGTCGAGGTTGGGGGACTCTGTGTGTGGACAGAGGGCGTCGGTGGAGCTCAGAGGGGGGGGTCTCTGGCAGGGAGAGAACAGGCTGCAGGGGCTGCTCCCTGGGGTGCCCGGCTGCAGGTGGAGGAGTGGGGCTCTTGTCCTTGGCCCAAGGAGCCACTGAAGGCTGTGAAGGAAAGAGCGTTGATGTCACAGAGCTGGGACAAGGGCCCCCAGAGAGCAGGATGGAGTGGGGTGTGTGTGGGGCTATTTCCAACAGGCCCGGTGGAGGCATGAGGACCAGATTGGGAGCACCATGAGGGGGAGGAAGGGGGCCCAGCACCCCCCGAGGCCCTCTTCTCAGGACAAAGTTCACCCTCTGAACCCACTCCAAGTGGTTCACTCCCGAGGGCTGGGCTTGGCCACGGCTGCGTCCCCAGCATCCCAGAGCCTGGCCTGGCACGGGCAGGAGCTGAAGAGCTCACACCTGGGGATGTGGGTCCAACATTGTCCCTGGAGCCCCGGGCCTCCCTCTGGCCTAAATCAGCTCACTTTCCTGGGGAGCGGGCGGGACTCCCGCAGCGTCCCAAGTTTCCCAGCGGCCTCCCACAGGCCCCAAGGGACGCAGTTGTTATCTTCACTTGCTCAGGGGACCCAGGAGGGAGCTACCGCCGGGGACCTCACCTGCCACGAGCCTCCCCTCACGTGTCGGTTTCAGAACTGTCCAGCTCTCCCTGCAGGAGCAGGCAGCCTGCGACCCCCGCCCAGAGGCCCTTGCCACCAGCGAGGGTCTCGTGTCAGGTGGGCGGCTCAAGGGAGCTGTGCGGGTGCTGGCGGTCTTTCTCCTCGTCC'
testseq = testseq[:2000]
pstring = sys.argv
forvaule = False
pdict = {}
pdict['md'] = False
pdict['shortcs'] = True
pdict['cigar2cg'] = False
pdict['eqx'] = False
command = 'vacmap'
op = 'noop'
for item in pstring[1:]:
    command += ' ' + item
    if('-' != item[:1]):
        forvaule = False
        if(op == 'outputdir'):
            if(item[-1] != '/'):
                pdict[op] = (item+'/') 
            else:
                pdict[op] = (item)
            continue
        if(op in pdict):
            if(type(pdict[op]) != list):
                pdict[op] = [pdict[op]]
            pdict[op].append(item)

        else:
            pdict[op] = item
            
        
    else:
        forvaule = True
        if(item[1] == '-'):
            op = item[2:]
            if(op[:2] == 'rg'):
                continue
            if(op == 'MD'):
                pdict['md'] = True
                pdict['eqx'] = True
                forvaule = False
                continue
            elif(op[:2] == 'cs'):
                pdict['md'] = True
                pdict['eqx'] = True
                if('=' in op):
                    if('long' == op[3:]):
                        pdict['shortcs'] = False
                    else:
                        pdict['shortcs'] = True
                else:
                    pdict['shortcs'] = True
                forvaule = False
                continue
            elif(op == 'L'):
                pdict['cigar2cg'] = True
            elif(op == 'eqx'):
                pdict['eqx'] = True
            else:
                pdict[op] = True
                   
        else:
            op = item[1:]

logging.info('CMD: '+ command)
hit = False
if('ref' not in pdict):
    logging.error('reference path is required.')
    hit = True
else:
    if(os.path.isfile(pdict['ref']) == False):
        logging.error('reference file not found.')
        hit = True
    else:
        logging.info('Input reference file: ' + pdict['ref'])
if('read' not in pdict):
    logging.error('read path is required.')
    hit = True
else:
    if(type(pdict['read']) == str):
        pdict['read'] = [pdict['read']]
    logging.info('Input ' + str(len(pdict['read'])) + ' read files')
    for filepath in pdict['read']:
        if(os.path.isfile(filepath) == False):
            logging.error(filepath + ' not found.')
            hit = True
        else:
            logging.info('Input read file: ' + filepath)
output_in_stdout = False
if('outputdir' not in pdict):
    output_in_stdout = True
else:
    prefix = pdict['outputdir']
    if(os.path.isdir(pdict['outputdir']) == False):
        os.mkdir(pdict['outputdir'])

if('mode' not in pdict):
    logging.error('mode is required.')
    hit = True
else:
    if(pdict['mode'] not in ('H', 'L', 'S', 'R')):
        logging.error('Invaild mode '+ pdict['mode'])
        hit = True
    else:
        logging.info('Mode: ' + pdict['mode'])
if(pdict['mode'] == 'L'):
    pdict['local_skipcost'] = 40.
    pdict['golbal_skipcost'] = 40.
elif(pdict['mode'] == 'H'):
    pdict['local_skipcost'] = 40.
    pdict['golbal_skipcost'] = 40.
else:
    pdict['local_skipcost'] = 30.
    pdict['golbal_skipcost'] = 30.
      
if('maxdivergence' not in pdict):
    pdict['maxdivergence'] = 0.5
else:
    pdict['maxdivergence'] = float(pdict['maxdivergence'])
logging.info('Max sequence divergence: ' + str(pdict['maxdivergence']) + ' [-maxdivergence ' + str(pdict['maxdivergence'])+']')    
if('t' not in pdict):
    pdict['t'] = 8
else:
    pdict['t'] = int(pdict['t'])
logging.info('Threads: ' + str(pdict['t']) + ' [-t ' + str(pdict['t'])+']')
    
if('k' not in pdict):
    pdict['k'] = '15'
else:
    pdict['k'] = str(pdict['k'])
logging.info('Kmer size: ' + pdict['k'] + ' [-k ' + str(pdict['k'])+']')
    
if('w' not in pdict):
    pdict['w'] = '10'
else:
    pdict['w'] = str(pdict['w'])
logging.info('Minimizer window size: ' + pdict['w'] + ' [-w ' + str(pdict['w'])+']')

if('c' not in pdict):
    pdict['c'] = 100
else:
    pdict['c'] = int(pdict['c'])
logging.info('Top N clusters: ' + str(pdict['c']) + ' [-c ' + str(pdict['c'])+']')

if('markunbalancetra' not in pdict):
    pdict['markunbalancetra'] = False
else:
    pdict['markunbalancetra'] = True
logging.info('Set the MAPQ of the unbalanced translocation subalignment to 1: ' + str(pdict['markunbalancetra']) + ' [--markunbalancetra]')

pdict['nodiscard'] = True


if('golbalpenalty' in pdict):
    pdict['golbal_skipcost'] = float(pdict['golbalpenalty'])
logging.info('Golbal variation penalty: ' + str(pdict['golbal_skipcost']) + ' [-golbalpenalty ' + str(pdict['golbal_skipcost'])+']')
logging.info('Tips: Set a smaller value for the global variation penalty to increase sensitivity to small translocations or small dispersed duplications.')

if('localpenalty' in pdict):
    pdict['local_skipcost'] = float(pdict['localpenalty'])
logging.info('Local variation penalty: ' + str(pdict['local_skipcost']) + ' [-localpenalty ' + str(pdict['local_skipcost'])+']')
logging.info('Tips: Set a smaller value for the local variation penalty to increase sensitivity to small rearrangements.')

if('golbalmaxdiff' not in pdict):
    pdict['golbal_maxdiff'] = 50
else:
    pdict['golbal_maxdiff'] = int(pdict['golbalmaxdiff'])
logging.info('Golbal max diff: ' + str(pdict['golbal_maxdiff']) + ' [-golbalmaxdiff ' + str(pdict['golbal_maxdiff'])+']')

if('localmaxdiff' not in pdict):
    pdict['local_maxdiff'] = 30
else:
    pdict['local_maxdiff'] = int(pdict['localmaxdiff'])
logging.info('Local max diff: ' + str(pdict['local_maxdiff']) + ' [-localmaxdiff ' + str(pdict['local_maxdiff'])+']')

if('copycomments' not in pdict):
    pdict['copycomments'] = False
else:
    pdict['copycomments'] = True
logging.info('Copy FASTA/Q comments to output: ' + str(pdict['copycomments']) + ' [--copycomments]')

if('nowriteindex' not in pdict):
    pdict['nowriteindex'] = False
else:
    pdict['nowriteindex'] = True
logging.info('No saving the reference index for reuse: ' + str(pdict['nowriteindex']) + ' [--nowriteindex]')

if('debug' not in pdict):
    pdict['debug'] = False
else:
    pdict['debug'] = True
logging.info('Debug: ' + str(pdict['debug']) + ' [--debug]')

logging.info('Build 08222024')


if(hit == True):
    print('Usage')
    print('vacmap -ref /ref.fasta -read /read.fasta -mode H|L -t 8 [--eqx] [--MD] [--cs] [--L]')
    print('\t-mode H ')
    print('\t\tFor aligning high error rate long read.(Pacbio CLR, ONT)')
    print('\t-mode L')
    print('\t\tFor aligning low error rate long read.(Pacbio HiFi)')
    print('\t--eqx')
    print('\t\tOutput =/X CIGAR operators for sequence match/mismatch.')
    print('\t--MD')
    print('\t\tOutput the MD tag.')
    print('\t--cs[=short|long]')
    print('\t\tOutput the cs tag. (deflaut: short cs)')
    print('\t--L')
    print('\t\tWrite CIGAR with >65535 operators at the CG tag.')


else:
    H = False
    if(pdict['mode'] == 'H'):
        import vacmap.mammap_clrnano as mammap
    elif(pdict['mode'] == 'L'):
        import vacmap.mammap_ccs as mammap
    elif(pdict['mode'] == 'S'):
        H = True 
        import vacmap.mammap_sensitive as mammap
    elif(pdict['mode'] == 'R'):
        import vacmap.mammap_noprefercloser as mammap
        
                    
    refpath = pdict['ref']
    if(pdict['nowriteindex'] == False):
        if((os.path.isfile(refpath+"_w"+pdict['w']+"_k"+pdict['k']+".mmi") == False)):
            if(('mmi' != refpath[-3:])):
                logging.info("Using minimap2 to build reference index")
                import subprocess
                subprocess.run(["minimap2", "-d", refpath+"_w"+pdict['w']+"_k"+pdict['k']+".mmi", refpath, "-w", pdict['w'], "-k", pdict['k']]) 
                refpath = refpath+"_w"+pdict['w']+"_k"+pdict['k']+".mmi"
                if(os.path.isfile(refpath) == False):
                    logging.error("Failed to build reference index")
                    hit = True
        else:
            refpath = refpath+"_w"+pdict['w']+"_k"+pdict['k']+".mmi"
    if(hit == False):
        pdict['ref'] = refpath


        refpath = pdict['ref']

        readpath = pdict['read']
        max_worker = pdict['t']

        index_object = mp.Aligner(refpath, w = int(pdict['w']), k = int(pdict['k']))  # load index

        if not index_object: raise Exception("ERROR: failed to load index")
        contig2start = Dict()
        contig2seq = Dict()
        index2contig = List()
        contig2iloc = dict()
        header = dict()
        header['HD'] = {'VN': '1.0'}
        header['SQ'] = []
        iloc = -1
        for item in index_object.seq_offset:
            iloc += 1
            contig2start[item[0].decode()] = item[2]
            contig2seq[item[0].decode()] = index_object.seq(item[0].decode()).upper()
            index2contig.append(item[0].decode())
            header['SQ'].append({'LN': len(contig2seq[item[0].decode()]), 'SN': item[0].decode()})
            contig2iloc[item[0].decode()] = iloc
        if('rg-id' in pdict and pdict['rg-id'] != ''):
            supported_RG_tag = ['ID', 'BC', 'CN', 'DS', 'DT', 'FO', 'KS', 'LB', 'PG', 'PI', 'PL', 'PM', 'PU', 'SM'] 
            rg_dict = dict()
            for key in pdict:
                
                if('rg' == key[:2]):
                    if(key[-2:].upper() in supported_RG_tag):
                        if(pdict[key] != ''):
                            rg_dict[key[-2:].upper()] = pdict[key]
                            logging.info('RG tag: ' + key[-2:].upper()+':'+rg_dict[key[-2:].upper()])
                        else:
                            logging.error('Missing value for RG tag: ' + key[-2:].upper())
                            
                    else:
                        logging.error('Unsupported RG tag: ' + key[-2:].upper())
                        
            header['RG'] = [rg_dict]
        else:
            logging.info('No RG tag.')
        header['PG'] = [{'ID': 'VACmap', 'PN': 'VACmap', 'VN': '1.0.08222024', 'CL': command}] 


        rc_testseq = str(Seq(testseq).reverse_complement())
        testseq_len = len(testseq)
        setting_kmersize = 9
        readid = 'hhk'
        try:
            onemapinfolist, (alignment_list,raw_alignment_list), one_mapinfo, f_redo_ratio = mammap.get_readmap_DP_test(readid, str(Seq(testseq).reverse_complement()),  contig2start, contig2seq, index_object, index2contig, pdict, hastra = True, refine = True, debug = False, H = H)  
        except Exception as error:
            pass






        n = max_worker
        if(output_in_stdout == True):
            logging.info('Output in stdout')
            raw_queue, cooked_queue = multiprocessing.Manager().Queue(maxsize=max_worker*200), multiprocessing.Manager().Queue(maxsize=max_worker*200)
            write_process = multiprocessing.Process(target=mammap.stdout_writer, args=(cooked_queue, header))
            write_process.start()
        else:
            raw_queue = multiprocessing.Manager().Queue(maxsize=max_worker*200)
        process_list = []
        for count in range(1, n+1):
            if(output_in_stdout == True):
                if(pdict['copycomments'] == False):
                    one_process = multiprocessing.Process(target=mammap.get_list_of_readmap_stdout, args=(raw_queue, cooked_queue, index_object, contig2seq, True, H, header, pdict))
                else:
                    one_process = multiprocessing.Process(target=mammap.get_list_of_readmap_stdout_comments, args=(raw_queue, cooked_queue, index_object, contig2seq, True, H, header, pdict))
                one_process.start()
                process_list.append(one_process)
            else:
                savepath = prefix+str(count)
                one_process = multiprocessing.Process(target=mammap.get_list_of_readmap, args=(raw_queue, savepath, index_object, contig2seq, True, H, header))
                one_process.start()
                process_list.append(one_process)

        st = time.time()
        tmp_st = st
        count = 0
        tmp_count = 0
        
        for fastapath in readpath:
            unique_set = set()
            logging.info('Reading ' + fastapath)
            if('bam' == fastapath[-3:]):
                bamfile = pysam.AlignmentFile(fastapath, check_sq=False)
                for rec in bamfile:

                    try:
                        name = rec.query_name
                        
                        if(hash(name) in unique_set):
                            continue
                        seq = rec.query_sequence.upper()
                        if(rec.is_reverse == True):
                            seq = str(Seq(seq).reverse_complement())
                    except:
                        logging.error('Failed to decode one read sequence, continue anyway.')
                        continue
                    unique_set.add(hash(name))
                    count += 1


                    raw_queue.put((name, seq, None))
                    if(count % 100000 == 0):
                        c_time = time.time()

                        tmptime = c_time - tmp_st
                        t_time = c_time - st


                        logging.info(str(round((count - tmp_count) / tmptime)) + ' / sec in the last ' + str(max(round(tmptime/60), 1)) + ' minutes, ' + str(round(count / t_time)) + ' / sec AVG. ' + str(count) + ' sequences processed.')
                        tmp_st = c_time
                        tmp_count = count
            else:
                if(pdict['copycomments'] == False):
                    for rec in mp.fastx_read(fastapath):
                        try:
                            name = rec[0]
                            if(hash(name) in unique_set):
                                continue
                            seq = rec[1].upper()
                        except:
                            logging.error('Failed to decode one read sequence, continue anyway.')
                            continue

                        unique_set.add(hash(name))
                        count += 1

                        raw_queue.put((name, seq, rec[2]))
                        #if(count > 10):
                            #break
                        if(count % 100000 == 0):
                            c_time = time.time()

                            tmptime = c_time - tmp_st
                            t_time = c_time - st


                            logging.info(str(round((count - tmp_count) / tmptime)) + ' / sec in the last ' + str(max(round(tmptime/60), 1)) + ' minutes, ' + str(round(count / t_time)) + ' / sec AVG. ' + str(count) + ' sequences processed.')
                            tmp_st = c_time
                            tmp_count = count
                else:
                    for rec in mp.fastx_read(fastapath, read_comment = True):
                        
                        try:
                            name = rec[0]
                            if(hash(name) in unique_set):
                                continue
                            seq = rec[1].upper()
                        except:
                            logging.error('Failed to decode one read sequence, continue anyway.')
                            continue

                        unique_set.add(hash(name))
                        count += 1

                        raw_queue.put((name, seq, rec[2], rec[3]))
                        #if(count > 10):
                            #break
                        if(count % 100000 == 0):
                            c_time = time.time()

                            tmptime = c_time - tmp_st
                            t_time = c_time - st


                            logging.info(str(round((count - tmp_count) / tmptime)) + ' / sec in the last ' + str(max(round(tmptime/60), 1)) + ' minutes, ' + str(round(count / t_time)) + ' / sec AVG. ' + str(count) + ' sequences processed.')
                            tmp_st = c_time
                            tmp_count = count
                    
                




        c_time = time.time()

        tmptime = c_time - tmp_st
        t_time = c_time - st


        
        for i in range(n):
            raw_queue.put(i)
        for one_process in process_list:
            one_process.join()
        if(output_in_stdout == False):
            logging.info('User time (h:m:s): {}:{}:{} '.format(int(t_time//3600), int(t_time%3600//60), int(t_time%60)) + str(round(count / t_time)) + ' / sec AVG. ' + str(count) + ' sequences processed.')
        else:
            cooked_queue.put(0)
            write_process.join()
            logging.info('User time (h:m:s): {}:{}:{} '.format(int(t_time//3600), int(t_time%3600//60), int(t_time%60)) + str(round(count / t_time)) + ' / sec AVG. ' + str(count) + ' sequences processed.')
